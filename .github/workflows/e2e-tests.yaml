name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install root dependencies
        run: npm ci
          
      - name: Run backend unit tests
        run: |
          cd backend
          npm ci
          npm test
      
      - name: Run frontend unit tests
        run: |
          cd frontend
          npm ci
          npm test

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: 1234
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u root -p 1234 --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli -a 1234 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_PASSWORD: 1234
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Install backend dependencies and start backend
        run: |
          cd backend
          npm ci
          npm start &
        env:
          DOMAIN: localhost
          PORT: 3001
          FRONTEND_ORIGIN: http://localhost:3000
          COOKIE_SECRET: s3cr3t
          MONGO_URI: mongodb://root:1234@localhost:27017
          REDIS_URI: redis://default:1234@localhost:6379
          
      - name: Install frontend dependencies and start frontend
        run: |
          cd frontend
          npm ci
          npm start &
        env:
          VITE_BACKEND_ORIGIN: http://localhost:3001
          PORT: 3000
          
      - name: Wait for services to be ready
        run: |
          # Wait for backend to start
          echo "Waiting for backend to start..."
          timeout 60 bash -c 'until curl -s http://localhost:3001/health > /dev/null; do sleep 2; done'
          
          # Wait for frontend to start
          echo "Waiting for frontend to start..."
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'
          
      - name: Install Playwright
        run: |
          cd test
          npm ci
          npx playwright install --with-deps chromium
          
      - name: Run Playwright tests
        run: |
          cd test
          npx playwright test
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: test/playwright-report/
          retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add deployment steps for your development environment
      - name: Deploy to development
        run: echo "Deploying to development environment..."
        # Add your actual deployment commands here

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add deployment steps for your production environment
      - name: Deploy to production
        run: echo "Deploying to production environment..."
        # Add your actual deployment commands here